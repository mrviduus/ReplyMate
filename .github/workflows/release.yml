name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Build extension
      run: npm run build
    
    - name: Package extension
      run: npm run package
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release Notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## What's New in v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Features" >> $GITHUB_OUTPUT
        echo "- Improved LinkedIn integration" >> $GITHUB_OUTPUT
        echo "- Enhanced AI response generation" >> $GITHUB_OUTPUT
        echo "- Better error handling" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Bug Fixes" >> $GITHUB_OUTPUT
        echo "- Fixed compatibility issues" >> $GITHUB_OUTPUT
        echo "- Improved performance" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Installation" >> $GITHUB_OUTPUT
        echo "Download the \`.crx\` file and install manually in Chrome, or download the \`.zip\` file to load as an unpacked extension in developer mode." >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ReplyMate v${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
    
    - name: Upload ZIP to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ReplyMate-v${{ steps.get_version.outputs.VERSION }}.zip
        asset_name: ReplyMate-v${{ steps.get_version.outputs.VERSION }}.zip
        asset_content_type: application/zip
    
    - name: Upload CRX to Release (if exists)
      uses: actions/upload-release-asset@v1
      if: hashFiles('./dist/*.crx') != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ReplyMate-v${{ steps.get_version.outputs.VERSION }}.crx
        asset_name: ReplyMate-v${{ steps.get_version.outputs.VERSION }}.crx
        asset_content_type: application/x-chrome-extension

  chrome-web-store:
    runs-on: ubuntu-latest
    needs: create-release
    if: ${{ !contains(github.ref, 'beta') && !contains(github.ref, 'alpha') }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build extension
      run: npm run build
    
    - name: Package for Chrome Web Store
      run: npm run package
    
    # Uncomment and configure when ready to auto-publish to Chrome Web Store
    # - name: Upload to Chrome Web Store
    #   uses: PlasmoHQ/bpp@v3
    #   with:
    #     keys: ${{ secrets.CHROME_WEB_STORE_KEYS }}
    #     artifact: dist/ReplyMate-*.zip
    #     verbose: true
